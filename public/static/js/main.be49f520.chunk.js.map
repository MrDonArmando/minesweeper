{"version":3,"sources":["Screens/Game/Cell/index.js","redux/BoardSettings/reducer.ts","redux/User/reducer.ts","redux/store.ts","redux/BoardSettings/types.ts","redux/User/types.ts","Screens/Game/Board/functions.ts","Screens/Game/Board/index.tsx","redux/BoardSettings/creators.ts","Screens/Game/Menu/index.tsx","Screens/Game/index.js","global/history.ts","redux/User/creators.ts","Screens/Login/index.tsx","serviceWorker.js","global/PrivateRoute/index.jsx","Screens/Register/index.tsx","index.js"],"names":["CELL_BACKGROUND_COLORS","CELL_FONT_COLORS","1","2","3","4","5","6","7","8","Cell","index","isMined","isClicked","handleClick","numberOfMinedAdjacentCells","disabled","className","style","backgroundColor","color","onClick","initialState","height","width","numberOfBombs","isFetching","token","undefined","isTryingToLogin","loginError","isTryingToRegister","registerError","rootReducer","combineReducers","board","state","action","type","payload","user","error","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","useTypedSelector","useSelector","findIndexesOfAdjacentCells","indexesOfCells","boardHeight","boardWidth","cb","forEach","indexOfCell","isCellFromFirstRow","isCellFromLastRow","isCellFromFirstColumn","isCellFromLastColumn","checkIfCellIsOnEdgeOfBoard","generateCells","cells","indexesOfMinedCells","length","randomNumber","Math","floor","random","includes","push","indexOfMinedCell","mineRandomCells","numberOfCells","Array","from","map","_","indexesOfAdjacentCells","id","uuidv4","generateCellsData","i","Board","isGameReseted","setIsGameReseted","useState","setCells","setGameOver","useEffect","boardSideLength","handleCellClick","clickedCell","cell","newCells","markAdjacentCellsAsClicked","adjacentCell","key","setBoardWidth","setBoardHeight","setNumberOfBombs","Menu","dispatch","useDispatch","boardWidthFromRedux","boardHeightFromRedux","numberOfBombsFromRedux","boardWidthLocal","setBoardWidthLocal","boardHeightLocal","setBoardHeightLocal","numberOfBombsLocal","setNumberOfBombsLocal","isMenuOpened","setMenuState","menuStyles","prevState","onSubmit","e","preventDefault","getState","fetch","method","headers","authorization","body","JSON","stringify","then","res","json","data","boardSettings","catch","err","console","log","finally","htmlFor","step","min","max","value","onChange","event","parseInt","target","Game","createHistory","require","createBrowserHistory","setLoginError","setRegisterError","Login","email","setEmail","password","setPassword","localStorage","setItem","setLoginSuccess","history","login","name","to","Boolean","location","hostname","match","PrivateRoute","Component","component","rest","render","props","getItem","pathname","Register","passwordConfirmation","setPasswordConfirmation","register","ReactDOM","StrictMode","path","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.be49f520.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.scss\";\r\n\r\nconst CELL_BACKGROUND_COLORS = {\r\n  UNCLICKED: \"#232124\",\r\n  CLICKED: \"#323134\",\r\n};\r\n\r\nconst CELL_FONT_COLORS = {\r\n  1: \"#ffe082\",\r\n  2: \"#ffb74d\",\r\n  3: \"#c75b39\",\r\n  4: \"#c41c00\",\r\n  5: \"#b91400\",\r\n  6: \"#ac0800\",\r\n  7: \"#9f0000\",\r\n  8: \"#870000\",\r\n};\r\n\r\nconst Cell = ({\r\n  index,\r\n  isMined,\r\n  isClicked,\r\n  handleClick,\r\n  numberOfMinedAdjacentCells,\r\n}) => {\r\n  return (\r\n    <button\r\n      disabled={isClicked}\r\n      className=\"cell\"\r\n      style={{\r\n        backgroundColor: isClicked\r\n          ? CELL_BACKGROUND_COLORS.CLICKED\r\n          : CELL_BACKGROUND_COLORS.UNCLICKED,\r\n        color: isMined ? \"white\" : CELL_FONT_COLORS[numberOfMinedAdjacentCells],\r\n      }}\r\n      onClick={() => handleClick(index)}\r\n    >\r\n      {!isMined &&\r\n        isClicked &&\r\n        numberOfMinedAdjacentCells !== 0 &&\r\n        numberOfMinedAdjacentCells}\r\n\r\n      {isMined && isClicked && \"X\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import { SET_BOARD_WIDTH, SET_BOARD_HEIGHT, BoardInfoTypes, SET_NUMBER_OF_BOMBS, START_OF_REQUEST, END_OF_REQUEST } from \"./types\";\r\n\r\ninterface BoardInfo{\r\n    height: number,\r\n    width: number,\r\n    numberOfBombs: number,\r\n    isFetching: boolean\r\n}\r\n\r\nconst initialState = {\r\n    height: 20,\r\n    width: 20,\r\n    numberOfBombs: 40,\r\n    isFetching: false,\r\n};\r\n\r\n\r\nexport default (state:BoardInfo = initialState, action:BoardInfoTypes):BoardInfo => {\r\n    switch(action.type){\r\n        case SET_BOARD_HEIGHT: \r\n          return {...state, height: action.payload.height}\r\n        \r\n        case SET_BOARD_WIDTH: \r\n          return {...state, width: action.payload.width}\r\n          \r\n        case SET_NUMBER_OF_BOMBS: \r\n          return {...state, numberOfBombs: action.payload.numberOfBombs}\r\n\r\n        case START_OF_REQUEST: \r\n        return {...state, isFetching:true}\r\n\r\n        case END_OF_REQUEST: \r\n        return {...state, isFetching: false}\r\n\r\n      default:\r\n          return state\r\n    }    \r\n}","import { SET_LOGIN_START, UserActions, SET_LOGIN_SUCCESS, SET_LOGIN_ERROR, SET_REGISTER_START, SET_REGISTER_SUCCESS, SET_REGISTER_ERROR } from \"./types\";\r\n\r\n\r\ninterface UserInfo{\r\n    token: string | undefined,\r\n    isTryingToLogin: boolean,\r\n    loginError: string | undefined\r\n    isTryingToRegister: boolean,\r\n    registerError: string | undefined\r\n}\r\n\r\nconst initialState = {\r\n    token: undefined,\r\n    isTryingToLogin: false,\r\n    loginError: undefined,\r\n    isTryingToRegister: false,\r\n    registerError: undefined\r\n};\r\n\r\n\r\nexport default (state:UserInfo = initialState, action:UserActions):UserInfo => {\r\n    switch(action.type){\r\n        case SET_LOGIN_START: \r\n            return {...state, isTryingToLogin: true}\r\n        \r\n        case SET_LOGIN_SUCCESS: \r\n            return {...state, isTryingToLogin: false, token: action.payload.token}\r\n\r\n        case SET_LOGIN_ERROR: \r\n            return {...state, isTryingToLogin: false, loginError: action.payload.error}\r\n\r\n        case SET_REGISTER_START: \r\n            return {...state, isTryingToRegister: true}\r\n        \r\n        case SET_REGISTER_SUCCESS: {\r\n            return {...state, isTryingToRegister: false}\r\n        }\r\n\r\n        case SET_REGISTER_ERROR: {\r\n            return {...state, registerError: action.payload.error}\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}","import {createStore, combineReducers, compose, applyMiddleware} from \"redux\";\r\nimport boardReducer from './BoardSettings/reducer'\r\nimport userReducer from \"./User/reducer\"\r\nimport { useSelector, TypedUseSelectorHook } from 'react-redux'\r\nimport thunk from \"redux-thunk\"\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    board: boardReducer,\r\n    user: userReducer\r\n})\r\n\r\ndeclare global {\r\n    interface Window {\r\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\n\r\nexport default store;","export const SET_BOARD_WIDTH = \"SET_BOARD_WIDTH\";\r\nexport const SET_BOARD_HEIGHT = \"SET_BOARD_HEIGHT\";\r\nexport const SET_NUMBER_OF_BOMBS = \"SET_NUMBER_OF_BOMBS\";\r\nexport const START_OF_REQUEST = \"START_OF_REQUEST\";\r\nexport const END_OF_REQUEST = 'END_OF_REQUEST';\r\n\r\nexport interface SetBoardWidthAction{\r\n    type: typeof SET_BOARD_WIDTH;\r\n    payload: {\r\n        width: number\r\n    }\r\n}\r\n\r\nexport interface SetBoardHeightAction{\r\n    type: typeof SET_BOARD_HEIGHT;\r\n    payload: {\r\n        height: number\r\n    }\r\n}\r\n\r\nexport interface SetNumberOfBombs{\r\n    type: typeof SET_NUMBER_OF_BOMBS;\r\n    payload: {\r\n        numberOfBombs: number\r\n    }\r\n}\r\n\r\nexport interface StartOfRequest{\r\n    type: typeof START_OF_REQUEST;\r\n}\r\n\r\nexport interface EndOfRequest{\r\n    type: typeof END_OF_REQUEST\r\n}\r\n\r\nexport type BoardInfoTypes = StartOfRequest | EndOfRequest | SetBoardWidthAction | SetBoardHeightAction | SetNumberOfBombs;\r\n","export const SET_LOGIN_START = 'SET_LOGIN_START';\r\nexport const SET_LOGIN_SUCCESS = 'SET_LOGIN_SUCCESS';\r\nexport const SET_LOGIN_ERROR = 'SET_LOGIN_ERROR'\r\n\r\nexport const SET_REGISTER_START = 'SET_REGISTER_START';\r\nexport const SET_REGISTER_SUCCESS = 'SET_REGISTER_SUCCESS';\r\nexport const SET_REGISTER_ERROR = 'SET_REGISTER_ERROR';\r\n\r\n\r\nexport interface SetLoginStartAction{\r\n    type: typeof SET_LOGIN_START\r\n}\r\n\r\nexport interface SetLoginSuccessAction{\r\n    type: typeof SET_LOGIN_SUCCESS,\r\n    payload: {\r\n        token: string\r\n    }\r\n}\r\n\r\nexport interface SetLoginErrorAction{\r\n    type: typeof SET_LOGIN_ERROR,\r\n    payload: {\r\n        error: string\r\n    }\r\n}\r\n\r\nexport interface SetRegisterStartAction{\r\n    type: typeof SET_REGISTER_START\r\n}\r\n\r\nexport interface SetRegisterSuccessAction{\r\n    type: typeof SET_REGISTER_SUCCESS\r\n}\r\n\r\nexport interface SetRegisterErrorAction{\r\n    type: typeof SET_REGISTER_ERROR,\r\n    payload: {\r\n        error: string\r\n    }\r\n}\r\n\r\nexport type UserActions = SetLoginStartAction | SetLoginSuccessAction | SetLoginErrorAction | SetRegisterStartAction | SetRegisterSuccessAction | SetRegisterErrorAction","import { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport interface ICell {\r\n    isMined: boolean;\r\n    isClicked: boolean;\r\n    numberOfMinedAdjacentCells: number;\r\n    indexesOfAdjacentCells: number[];\r\n    id: string;\r\n  }\r\n  \r\n  export const checkIfCellIsOnEdgeOfBoard = (\r\n    indexOfCell: number,\r\n    boardHeight: number,\r\n    boardWidth: number\r\n  ) => {\r\n    \r\n    //Indexes starts from 0 which makes difficult these calculations\r\n    return {\r\n      isCellFromFirstRow: indexOfCell + 1 <= boardWidth,\r\n      isCellFromLastRow: indexOfCell + 1 > boardWidth * boardHeight - boardWidth,\r\n      isCellFromFirstColumn: (indexOfCell + 1) % boardWidth === 1,\r\n      isCellFromLastColumn: (indexOfCell + 1) % boardWidth === 0,\r\n    };\r\n  };\r\n  \r\n  export const generateCellsData = (numberOfCells: number) => {\r\n    return Array.from({ length: numberOfCells }).map((_, index) => ({\r\n      isMined: false,\r\n      isClicked: false,\r\n      numberOfMinedAdjacentCells: 0,\r\n      indexesOfAdjacentCells: [],\r\n      id: uuidv4(),\r\n    }));\r\n  };\r\n  \r\n  export const mineRandomCells = (numberOfBombs:number, cells: ICell[]) => {\r\n    const indexesOfMinedCells: number[] = [];\r\n    while (indexesOfMinedCells.length < numberOfBombs) {\r\n      const randomNumber = Math.floor(Math.random() * cells.length);\r\n      if (!indexesOfMinedCells.includes(randomNumber))\r\n        indexesOfMinedCells.push(randomNumber);\r\n    }\r\n  \r\n    indexesOfMinedCells.forEach((indexOfMinedCell: number) => {\r\n      cells[indexOfMinedCell].isMined = true;\r\n    });\r\n    return { cells, indexesOfMinedCells };\r\n  };\r\n  \r\n  export const findIndexesOfAdjacentCells = (\r\n    indexesOfCells: number[],\r\n    boardHeight: number,\r\n    boardWidth: number,\r\n    cb: Function\r\n  ): void => {\r\n    indexesOfCells.forEach((indexOfCell: number) => {\r\n      const {\r\n        isCellFromFirstRow,\r\n        isCellFromFirstColumn,\r\n        isCellFromLastColumn,\r\n        isCellFromLastRow,\r\n      } = checkIfCellIsOnEdgeOfBoard(indexOfCell, boardHeight, boardWidth);\r\n\r\n      if (isCellFromFirstRow && isCellFromFirstColumn) {\r\n        cb(indexOfCell, [\r\n          indexOfCell + 1,\r\n          indexOfCell + boardWidth,\r\n          indexOfCell + boardWidth + 1,\r\n        ]);\r\n      } else if (isCellFromFirstRow && isCellFromLastColumn) {\r\n        cb(indexOfCell, [\r\n          indexOfCell - 1,\r\n          indexOfCell + boardWidth,\r\n          indexOfCell + boardWidth - 1,\r\n        ]);\r\n      } else if (isCellFromLastRow && isCellFromFirstColumn) {\r\n        cb(indexOfCell, [\r\n          indexOfCell + 1,\r\n          indexOfCell - boardWidth,\r\n          indexOfCell - boardWidth + 1,\r\n        ]);\r\n      } else if (isCellFromLastRow && isCellFromLastColumn) {\r\n        cb(indexOfCell, [\r\n          indexOfCell - 1,\r\n          indexOfCell - boardWidth,\r\n          indexOfCell - boardWidth - 1,\r\n        ]);\r\n      } else if (isCellFromFirstRow) {\r\n        cb(indexOfCell, [\r\n          indexOfCell - 1,\r\n          indexOfCell + 1,\r\n          indexOfCell + boardWidth,\r\n          indexOfCell + boardWidth + 1,\r\n          indexOfCell + boardWidth - 1,\r\n        ]);\r\n      } else if (isCellFromLastRow) {\r\n        cb(indexOfCell, [\r\n          indexOfCell - 1,\r\n          indexOfCell + 1,\r\n          indexOfCell - boardWidth,\r\n          indexOfCell - boardWidth - 1,\r\n          indexOfCell - boardWidth + 1,\r\n        ]);\r\n      } else if (isCellFromFirstColumn) {\r\n        cb(indexOfCell, [\r\n          indexOfCell + 1,\r\n          indexOfCell - boardWidth,\r\n          indexOfCell - boardWidth + 1,\r\n          indexOfCell + boardWidth,\r\n          indexOfCell + boardWidth + 1,\r\n        ]);\r\n      } else if (isCellFromLastColumn) {\r\n        cb(indexOfCell, [\r\n          indexOfCell - 1,\r\n          indexOfCell - boardWidth,\r\n          indexOfCell - boardWidth - 1,\r\n          indexOfCell + boardWidth,\r\n          indexOfCell + boardWidth - 1,\r\n        ]);\r\n      } else {\r\n        cb(indexOfCell, [\r\n          indexOfCell - 1,\r\n          indexOfCell + 1,\r\n          indexOfCell - boardWidth,\r\n          indexOfCell - boardWidth - 1,\r\n          indexOfCell - boardWidth + 1,\r\n          indexOfCell + boardWidth,\r\n          indexOfCell + boardWidth - 1,\r\n          indexOfCell + boardWidth + 1,\r\n        ]);\r\n      }\r\n    });\r\n  };\r\n  \r\n  export const generateCells = (numberOfBombs:number, boardHeight: number, boardWidth: number) => {\r\n    const numberOfCells = boardHeight * boardWidth;\r\n    const basicCells = generateCellsData(numberOfCells);\r\n  \r\n    const { cells, indexesOfMinedCells } = mineRandomCells(numberOfBombs, basicCells);\r\n  \r\n    const notifyAdjacentCellsAboutBomb = (\r\n      indexOfCell: number,\r\n      indexesOfAdjacentCells: number[]\r\n    ) => {\r\n      indexesOfAdjacentCells.forEach((index) => {\r\n        cells[index].numberOfMinedAdjacentCells++;\r\n      });\r\n    };\r\n  \r\n    const addInfoAboutAdjacentCells = (\r\n      indexOfCell: number,\r\n      indexesOfAdjacentCells: number[]\r\n    ) => {\r\n      cells[indexOfCell].indexesOfAdjacentCells = indexesOfAdjacentCells;\r\n    };\r\n  \r\n    findIndexesOfAdjacentCells(\r\n      indexesOfMinedCells,\r\n      boardHeight,\r\n      boardWidth,\r\n      notifyAdjacentCellsAboutBomb\r\n    );\r\n  \r\n    findIndexesOfAdjacentCells(\r\n      cells.map((_, i) => i),\r\n      boardHeight,\r\n      boardWidth,\r\n      addInfoAboutAdjacentCells\r\n    );\r\n  \r\n    return cells;\r\n  };","import React, { useState, useEffect } from \"react\";\r\nimport \"./index.scss\";\r\nimport Cell from \"../Cell\";\r\nimport { useTypedSelector } from \"../../../redux/store\";\r\nimport { generateCells, ICell } from \"./functions\";\r\n\r\ninterface Props {\r\n  isGameReseted: boolean;\r\n  setIsGameReseted: Function;\r\n}\r\n\r\nfunction Board({ isGameReseted, setIsGameReseted }: Props) {\r\n  const boardWidth = useTypedSelector((state) => state.board.width);\r\n  const boardHeight = useTypedSelector((state) => state.board.height);\r\n  const numberOfBombs = useTypedSelector((state) => state.board.numberOfBombs);\r\n\r\n  const [cells, setCells] = useState(() =>\r\n    generateCells(numberOfBombs, boardHeight, boardWidth)\r\n  );\r\n  const [isGameOver, setGameOver] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isGameReseted) {\r\n      setCells(generateCells(numberOfBombs, boardHeight, boardWidth));\r\n      setIsGameReseted(false);\r\n    }\r\n  }, [isGameReseted]);\r\n\r\n  useEffect(() => {\r\n    setCells(generateCells(numberOfBombs, boardHeight, boardWidth));\r\n  }, [numberOfBombs, boardWidth, boardHeight]);\r\n\r\n  const boardSideLength = {\r\n    width: `${boardWidth * 40 + 2}px`,\r\n    height: `${boardHeight * 40 + 2}px`,\r\n  };\r\n\r\n  const markAdjacentCellsAsClicked = (\r\n    cells: ICell[],\r\n    indexesOfAdjacentCells: number[]\r\n  ) => {\r\n    indexesOfAdjacentCells.forEach((indexOfCell) => {\r\n      const adjacentCell = cells[indexOfCell];\r\n      if (adjacentCell.isClicked) return;\r\n      adjacentCell.isClicked = true;\r\n\r\n      if (adjacentCell.numberOfMinedAdjacentCells !== 0) return;\r\n\r\n      markAdjacentCellsAsClicked(cells, adjacentCell.indexesOfAdjacentCells);\r\n    });\r\n  };\r\n\r\n  const handleCellClick = (index: number) => {\r\n    const clickedCell = cells[index];\r\n\r\n    if (clickedCell.isMined) {\r\n      setGameOver(true);\r\n\r\n      setCells((cells) => cells.map((cell) => ({ ...cell, isClicked: true })));\r\n      return;\r\n    }\r\n\r\n    const newCells = cells.map((cell) => ({ ...cell }));\r\n    newCells[index].isClicked = true;\r\n\r\n    if (clickedCell.numberOfMinedAdjacentCells === 0) {\r\n      markAdjacentCellsAsClicked(newCells, clickedCell.indexesOfAdjacentCells);\r\n    }\r\n    setCells(newCells);\r\n  };\r\n\r\n  return (\r\n    <div id=\"container-board\">\r\n      <div id=\"board\" style={boardSideLength}>\r\n        {cells.map(\r\n          ({ isMined, isClicked, numberOfMinedAdjacentCells, id }, index) => (\r\n            <Cell\r\n              key={id}\r\n              index={index}\r\n              isMined={isMined}\r\n              isClicked={isClicked}\r\n              numberOfMinedAdjacentCells={numberOfMinedAdjacentCells}\r\n              handleClick={handleCellClick}\r\n            />\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import {\r\n  SET_BOARD_WIDTH,\r\n  SET_BOARD_HEIGHT,\r\n  SetBoardWidthAction,\r\n  SetBoardHeightAction,\r\n  SetNumberOfBombs,\r\n  SET_NUMBER_OF_BOMBS,\r\n  START_OF_REQUEST,\r\n  END_OF_REQUEST,\r\n  StartOfRequest,\r\n  EndOfRequest,\r\n} from \"./types\";\r\nimport { AppDispatch, RootState } from \"../store\";\r\n\r\nexport const setBoardWidth = (width: number): SetBoardWidthAction => ({\r\n  type: SET_BOARD_WIDTH,\r\n  payload: {\r\n    width,\r\n  },\r\n});\r\n\r\nexport const setBoardHeight = (height: number): SetBoardHeightAction => ({\r\n  type: SET_BOARD_HEIGHT,\r\n  payload: {\r\n    height,\r\n  },\r\n});\r\n\r\nexport const setNumberOfBombs = (numberOfBombs: number): SetNumberOfBombs => ({\r\n  type: SET_NUMBER_OF_BOMBS,\r\n  payload: {\r\n    numberOfBombs,\r\n  },\r\n});\r\n\r\nexport const startOfRequest = (): StartOfRequest => ({\r\n  type: START_OF_REQUEST,\r\n});\r\n\r\nexport const endOfRequest = (): EndOfRequest => ({\r\n  type: END_OF_REQUEST,\r\n});\r\n\r\nexport const changeBoardSettings = (\r\n  width: number,\r\n  height: number,\r\n  numberOfBombs: number\r\n) => (dispatch: AppDispatch, getState: () => RootState) => {\r\n  dispatch(startOfRequest());\r\n\r\n  const state = getState();\r\n  fetch(\"/user/settings\", {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      authorization: `Bearer ${state.user.token}`,\r\n    },\r\n    body: JSON.stringify({ width, height, numberOfBombs }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      const { width, height, numberOfBombs } = data.boardSettings;\r\n      dispatch(setBoardWidth(width));\r\n      dispatch(setBoardHeight(height));\r\n      dispatch(setNumberOfBombs(numberOfBombs));\r\n    })\r\n    .catch((err) => console.log(\"ERROR: \", err))\r\n    .finally(() => dispatch(endOfRequest()));\r\n};\r\n","import React, { useState, useEffect, FormEvent } from \"react\";\r\nimport \"./index.scss\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useTypedSelector } from \"../../../redux/store\";\r\nimport {\r\n  setBoardWidth,\r\n  setBoardHeight,\r\n  setNumberOfBombs,\r\n  changeBoardSettings,\r\n} from \"../../../redux/BoardSettings/creators\";\r\n\r\ninterface Props {\r\n  setIsGameReseted: Function;\r\n}\r\n\r\nconst Menu = ({ setIsGameReseted }: Props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const isFetching = useTypedSelector((state) => state.board.isFetching);\r\n  const boardWidthFromRedux = useTypedSelector((state) => state.board.width);\r\n  const boardHeightFromRedux = useTypedSelector((state) => state.board.height);\r\n  const numberOfBombsFromRedux = useTypedSelector(\r\n    (state) => state.board.numberOfBombs\r\n  );\r\n\r\n  const [boardWidthLocal, setBoardWidthLocal] = useState(boardWidthFromRedux);\r\n  const [boardHeightLocal, setBoardHeightLocal] = useState(\r\n    boardHeightFromRedux\r\n  );\r\n  const [numberOfBombsLocal, setNumberOfBombsLocal] = useState(\r\n    numberOfBombsFromRedux\r\n  );\r\n\r\n  const [isMenuOpened, setMenuState] = useState(true);\r\n\r\n  const menuStyles = {\r\n    width: isMenuOpened ? \"400px\" : \"80px\",\r\n  };\r\n\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      changeBoardSettings(boardWidthLocal, boardHeightLocal, numberOfBombsLocal)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"menu-container\" style={menuStyles}>\r\n      <div id=\"section-menu-container\">\r\n        <button\r\n          className=\"hamburger-button\"\r\n          onClick={() => setMenuState((prevState) => !prevState)}\r\n        >\r\n          <span className=\"hamburger-line\"></span>\r\n          <span className=\"hamburger-line\"></span>\r\n          <span className=\"hamburger-line\"></span>\r\n        </button>\r\n\r\n        {isMenuOpened && (\r\n          <button id=\"button-reset\" onClick={() => setIsGameReseted(true)}>\r\n            Reset\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {isMenuOpened && (\r\n        <>\r\n          <form id=\"section-menu-container\" onSubmit={handleSubmit}>\r\n            <div className=\"container-connect\">\r\n              <label className=\"board-size-label\" htmlFor=\"input-board-width\">\r\n                WIDTH\r\n              </label>\r\n              <input\r\n                id=\"input-board-width\"\r\n                type=\"number\"\r\n                className=\"board-size-input\"\r\n                step={1}\r\n                min={4}\r\n                max={20}\r\n                value={boardWidthLocal}\r\n                onChange={(event) =>\r\n                  setBoardWidthLocal(parseInt(event.target.value))\r\n                }\r\n              />\r\n            </div>\r\n\r\n            <div className=\"container-connect\">\r\n              <label className=\"board-size-label\">HEIGHT</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"board-size-input\"\r\n                step={1}\r\n                min={4}\r\n                max={20}\r\n                value={boardHeightLocal}\r\n                onChange={(event) =>\r\n                  setBoardHeightLocal(parseInt(event.target.value))\r\n                }\r\n              />\r\n            </div>\r\n\r\n            <div className=\"container-connect\">\r\n              <label className=\"number-of-bombs-label\">NUMBER OF BOMBS</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"number-of-bombs-input\"\r\n                step={1}\r\n                min={1}\r\n                max={boardWidthLocal * boardHeightLocal}\r\n                value={numberOfBombsLocal}\r\n                onChange={(event) =>\r\n                  setNumberOfBombsLocal(parseInt(event.target.value))\r\n                }\r\n              />\r\n            </div>\r\n\r\n            <button type=\"submit\" id=\"button-submit-board-settings\">\r\n              Submit {isFetching && \"...\"}\r\n            </button>\r\n          </form>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { useState } from \"react\";\r\nimport \"./index.scss\";\r\nimport Board from \"./Board/index.tsx\";\r\nimport Menu from \"./Menu/index.tsx\";\r\n\r\nfunction Game() {\r\n  const [isGameReseted, setIsGameReseted] = useState(false);\r\n\r\n  return (\r\n    <div id=\"container-main\">\r\n      <Board\r\n        isGameReseted={isGameReseted}\r\n        setIsGameReseted={setIsGameReseted}\r\n      />\r\n      <Menu setIsGameReseted={setIsGameReseted} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","const createHistory = require(\"history\").createBrowserHistory;\r\n\r\nexport default createHistory()","import {\r\n  SET_LOGIN_START,\r\n  SET_LOGIN_SUCCESS,\r\n  SET_LOGIN_ERROR,\r\n  SetLoginStartAction,\r\n  SetLoginSuccessAction,\r\n  SetLoginErrorAction,\r\n  SetRegisterSuccessAction,\r\n  SetRegisterStartAction,\r\n  SetRegisterErrorAction,\r\n  SET_REGISTER_START,\r\n  SET_REGISTER_SUCCESS,\r\n  SET_REGISTER_ERROR,\r\n} from \"./types\";\r\nimport { AppDispatch } from \"../store\";\r\nimport {\r\n  setBoardWidth,\r\n  setBoardHeight,\r\n  setNumberOfBombs,\r\n} from \"../BoardSettings/creators\";\r\nimport history from \"../..//global/history\";\r\n\r\nexport const setLoginStart = (): SetLoginStartAction => ({\r\n  type: SET_LOGIN_START,\r\n});\r\n\r\nexport const setLoginSuccess = (token: string): SetLoginSuccessAction => ({\r\n  type: SET_LOGIN_SUCCESS,\r\n  payload: {\r\n    token,\r\n  },\r\n});\r\n\r\nexport const setLoginError = (error: string): SetLoginErrorAction => ({\r\n  type: SET_LOGIN_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n\r\nexport const login = (email: string, password: string) => (\r\n  dispatch: AppDispatch\r\n) => {\r\n  dispatch(setLoginStart());\r\n\r\n  fetch(\"/user/login\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      if (data.error) return dispatch(setLoginError(data.error));\r\n\r\n      console.log(\"LOGIN DATA: \", data);\r\n      const {\r\n        token,\r\n        boardSettings: { width, height, numberOfBombs },\r\n      } = data;\r\n      localStorage.setItem(\"minesweeper_token\", token);\r\n      dispatch(setLoginSuccess(token));\r\n      dispatch(setBoardWidth(width));\r\n      dispatch(setBoardHeight(height));\r\n      dispatch(setNumberOfBombs(numberOfBombs));\r\n      history.push(\"/game\");\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"ERROR: \", err);\r\n      dispatch(setLoginError(err));\r\n    });\r\n};\r\n\r\nexport const setRegisterStart = (): SetRegisterStartAction => ({\r\n  type: SET_REGISTER_START,\r\n});\r\n\r\nexport const setRegisterSuccess = (): SetRegisterSuccessAction => ({\r\n  type: SET_REGISTER_SUCCESS,\r\n});\r\n\r\nexport const setRegisterError = (error: string): SetRegisterErrorAction => ({\r\n  type: SET_REGISTER_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n\r\nexport const register = (\r\n  email: string,\r\n  password: string,\r\n  passwordConfirmation: string\r\n) => (dispatch: AppDispatch) => {\r\n  dispatch(setRegisterStart());\r\n\r\n  fetch(\"/user/register\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ email, password, passwordConfirmation }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      if (data.error) {\r\n        console.log(\"ERROR: \", data.error);\r\n        dispatch(setRegisterError(data.error));\r\n        return;\r\n      }\r\n      console.log(\"REGISTER DATA: \", data);\r\n      dispatch(setRegisterSuccess());\r\n      history.push(\"/\");\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"ERROR: \", err);\r\n      dispatch(setRegisterError(err));\r\n    });\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { login } from \"../../redux/User/creators\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTypedSelector } from \"../../redux/store\";\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n  const loginError = useTypedSelector((state) => state.user.loginError);\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  return (\r\n    <div id=\"container-login\">\r\n      <form\r\n        id=\"login-form\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          dispatch(login(email, password));\r\n        }}\r\n      >\r\n        <fieldset id=\"login-fieldset\">\r\n          <legend id=\"login-legend\"> Minesweeper</legend>\r\n          <label className=\"login-label\">\r\n            Email\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              className=\"login-input\"\r\n            />\r\n          </label>\r\n\r\n          <label className=\"login-label\">\r\n            Password\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              className=\"login-input\"\r\n            />\r\n          </label>\r\n          {loginError && <span id=\"login-error\">{loginError}</span>}\r\n\r\n          <button className=\"button-submit-login\">Login</button>\r\n        </fieldset>\r\n        <Link to=\"/register\" id=\"register-link\">\r\n          Register here\r\n        </Link>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nconst PrivateRoute = ({ component:Component, ...rest }) => {\r\n    //const token = useSelector(state => state.user.token)\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={(props) =>\r\n          localStorage.getItem(\"minesweeper_token\") ? (\r\n            <Component {...props}/>\r\n          ) : (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/login\",\r\n                state: { from: props.location }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  export default PrivateRoute;","import React, { useState } from \"react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { register } from \"../../redux/User/creators\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTypedSelector } from \"../../redux/store\";\r\n\r\nconst Register = () => {\r\n  const dispatch = useDispatch();\r\n  const registerError = useTypedSelector((state) => state.user.registerError);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\r\n\r\n  return (\r\n    <div id=\"container-register\">\r\n      <form\r\n        id=\"register-form\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          dispatch(register(email, password, passwordConfirmation));\r\n        }}\r\n      >\r\n        <fieldset id=\"register-fieldset\">\r\n          <legend id=\"register-legend\"> Minesweeper</legend>\r\n          <label className=\"register-label\">\r\n            Email\r\n            <input\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              className=\"register-input\"\r\n            />\r\n          </label>\r\n\r\n          <label className=\"register-label\">\r\n            Password\r\n            <input\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              type=\"password\"\r\n              className=\"register-input\"\r\n            />\r\n          </label>\r\n\r\n          <label className=\"register-label\">\r\n            Confirm password\r\n            <input\r\n              value={passwordConfirmation}\r\n              onChange={(e) => setPasswordConfirmation(e.target.value)}\r\n              type=\"password\"\r\n              className=\"register-input\"\r\n            />\r\n          </label>\r\n\r\n          {registerError && <span id=\"register-error\">{registerError}</span>}\r\n\r\n          <button className=\"button-submit-register\">Register</button>\r\n        </fieldset>\r\n\r\n        <Link to=\"/\" id=\"login-link\">\r\n          Login here\r\n        </Link>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Game from \"./Screens/Game\";\r\nimport Login from \"./Screens/Login\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store.ts\";\r\nimport { Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport PrivateRoute from \"./global/PrivateRoute\";\r\nimport history from \"./global/history\";\r\nimport Register from \"./Screens/Register\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router history={history}>\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <Login />\r\n          </Route>\r\n          <Route path=\"/register\" exact>\r\n            <Register />\r\n          </Route>\r\n          <PrivateRoute path=\"/game\" exact>\r\n            <Game />\r\n          </PrivateRoute>\r\n        </Switch>\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}