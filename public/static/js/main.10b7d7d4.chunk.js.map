{"version":3,"sources":["Screens/Game/Cell/index.js","redux/BoardSettings/reducer.ts","redux/User/reducer.ts","redux/store.ts","redux/BoardSettings/types.ts","redux/User/types.ts","Screens/Game/Board/functions.ts","Screens/Game/Board/index.tsx","global_components/Modal/index.tsx","redux/BoardSettings/creators.ts","Screens/Game/GameSettings/index.tsx","Screens/Game/Menu/index.tsx","Screens/Game/index.js","global_components/History/index.ts","redux/User/creators.ts","Screens/Login/index.tsx","serviceWorker.js","global_components/PrivateRoute/index.jsx","Screens/Register/index.tsx","index.js"],"names":["CELL_BACKGROUND_COLORS","CELL_FONT_COLORS","1","2","3","4","5","6","7","8","Cell","index","isMined","isClicked","handleClick","numberOfMinedAdjacentCells","disabled","className","style","backgroundColor","color","onClick","initialState","height","width","numberOfBombs","isFetching","token","undefined","isTryingToLogin","loginError","isTryingToRegister","registerError","rootReducer","combineReducers","board","state","action","type","payload","user","error","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","useTypedSelector","useSelector","findIndexesOfAdjacentCells","indexesOfCells","boardHeight","boardWidth","cb","forEach","indexOfCell","isCellFromFirstRow","isCellFromLastRow","isCellFromFirstColumn","isCellFromLastColumn","checkIfCellIsOnEdgeOfBoard","generateCells","cells","indexesOfMinedCells","length","randomNumber","Math","floor","random","includes","push","indexOfMinedCell","mineRandomCells","numberOfCells","Array","from","map","_","indexesOfAdjacentCells","id","uuidv4","generateCellsData","i","Board","isGameReseted","setIsGameReseted","useState","setCells","setGameOver","useEffect","boardSideLength","handleCellClick","clickedCell","cell","newCells","markAdjacentCellsAsClicked","adjacentCell","key","Modal","children","isOpened","root","document","getElementById","filter","modalRoot","ReactDom","createPortal","setBoardWidth","setBoardHeight","setNumberOfBombs","GameSettings","closeModal","dispatch","useDispatch","boardWidthFromRedux","boardHeightFromRedux","numberOfBombsFromRedux","boardWidthLocal","setBoardWidthLocal","boardHeightLocal","setBoardHeightLocal","numberOfBombsLocal","setNumberOfBombsLocal","htmlFor","step","min","max","value","onChange","event","parseInt","target","console","log","e","preventDefault","getState","fetch","method","headers","authorization","body","JSON","stringify","then","res","json","data","boardSettings","catch","err","finally","Menu","isModalOpened","setIsModalOpened","Game","createHistory","require","createBrowserHistory","setLoginError","setRegisterError","Login","email","setEmail","password","setPassword","onSubmit","localStorage","setItem","setLoginSuccess","history","login","name","to","Boolean","location","hostname","match","PrivateRoute","Component","component","rest","render","props","getItem","pathname","Register","passwordConfirmation","setPasswordConfirmation","register","ReactDOM","StrictMode","Provider","size","path","exact","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.10b7d7d4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.scss\";\r\n\r\nconst CELL_BACKGROUND_COLORS = {\r\n  UNCLICKED: \"#232124\",\r\n  CLICKED: \"#323134\",\r\n};\r\n\r\nconst CELL_FONT_COLORS = {\r\n  1: \"#ffe082\",\r\n  2: \"#ffb74d\",\r\n  3: \"#c75b39\",\r\n  4: \"#c41c00\",\r\n  5: \"#b91400\",\r\n  6: \"#ac0800\",\r\n  7: \"#9f0000\",\r\n  8: \"#870000\",\r\n};\r\n\r\nconst Cell = ({\r\n  index,\r\n  isMined,\r\n  isClicked,\r\n  handleClick,\r\n  numberOfMinedAdjacentCells,\r\n}) => {\r\n  return (\r\n    <button\r\n      disabled={isClicked}\r\n      className=\"cell flex-center\"\r\n      style={{\r\n        backgroundColor: isClicked\r\n          ? CELL_BACKGROUND_COLORS.CLICKED\r\n          : CELL_BACKGROUND_COLORS.UNCLICKED,\r\n        color: isMined ? \"white\" : CELL_FONT_COLORS[numberOfMinedAdjacentCells],\r\n      }}\r\n      onClick={() => handleClick(index)}\r\n    >\r\n      {!isMined &&\r\n        isClicked &&\r\n        numberOfMinedAdjacentCells !== 0 &&\r\n        numberOfMinedAdjacentCells}\r\n\r\n      {isMined && isClicked && \"X\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import { SET_BOARD_WIDTH, SET_BOARD_HEIGHT, BoardInfoTypes, SET_NUMBER_OF_BOMBS, START_OF_REQUEST, END_OF_REQUEST } from \"./types\";\r\n\r\ninterface BoardInfo{\r\n    height: number,\r\n    width: number,\r\n    numberOfBombs: number,\r\n    isFetching: boolean\r\n}\r\n\r\nconst initialState = {\r\n    height: 20,\r\n    width: 20,\r\n    numberOfBombs: 40,\r\n    isFetching: false,\r\n};\r\n\r\n\r\nexport default (state:BoardInfo = initialState, action:BoardInfoTypes):BoardInfo => {\r\n    switch(action.type){\r\n        case SET_BOARD_HEIGHT: \r\n          return {...state, height: action.payload.height}\r\n        \r\n        case SET_BOARD_WIDTH: \r\n          return {...state, width: action.payload.width}\r\n          \r\n        case SET_NUMBER_OF_BOMBS: \r\n          return {...state, numberOfBombs: action.payload.numberOfBombs}\r\n\r\n        case START_OF_REQUEST: \r\n        return {...state, isFetching:true}\r\n\r\n        case END_OF_REQUEST: \r\n        return {...state, isFetching: false}\r\n\r\n      default:\r\n          return state\r\n    }    \r\n}","import { SET_LOGIN_START, UserActions, SET_LOGIN_SUCCESS, SET_LOGIN_ERROR, SET_REGISTER_START, SET_REGISTER_SUCCESS, SET_REGISTER_ERROR } from \"./types\";\r\n\r\n\r\ninterface UserInfo{\r\n    token: string | undefined,\r\n    isTryingToLogin: boolean,\r\n    loginError: string | undefined\r\n    isTryingToRegister: boolean,\r\n    registerError: string | undefined\r\n}\r\n\r\nconst initialState = {\r\n    token: undefined,\r\n    isTryingToLogin: false,\r\n    loginError: undefined,\r\n    isTryingToRegister: false,\r\n    registerError: undefined\r\n};\r\n\r\n\r\nexport default (state:UserInfo = initialState, action:UserActions):UserInfo => {\r\n    switch(action.type){\r\n        case SET_LOGIN_START: \r\n            return {...state, isTryingToLogin: true}\r\n        \r\n        case SET_LOGIN_SUCCESS: \r\n            return {...state, isTryingToLogin: false, token: action.payload.token}\r\n\r\n        case SET_LOGIN_ERROR: \r\n            return {...state, isTryingToLogin: false, loginError: action.payload.error}\r\n\r\n        case SET_REGISTER_START: \r\n            return {...state, isTryingToRegister: true}\r\n        \r\n        case SET_REGISTER_SUCCESS: {\r\n            return {...state, isTryingToRegister: false}\r\n        }\r\n\r\n        case SET_REGISTER_ERROR: {\r\n            return {...state, registerError: action.payload.error}\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}","import {createStore, combineReducers, compose, applyMiddleware} from \"redux\";\r\nimport boardReducer from './BoardSettings/reducer'\r\nimport userReducer from \"./User/reducer\"\r\nimport { useSelector, TypedUseSelectorHook } from 'react-redux'\r\nimport thunk from \"redux-thunk\"\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    board: boardReducer,\r\n    user: userReducer\r\n})\r\n\r\ndeclare global {\r\n    interface Window {\r\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\n\r\nexport default store;","export const SET_BOARD_WIDTH = \"SET_BOARD_WIDTH\";\r\nexport const SET_BOARD_HEIGHT = \"SET_BOARD_HEIGHT\";\r\nexport const SET_NUMBER_OF_BOMBS = \"SET_NUMBER_OF_BOMBS\";\r\nexport const START_OF_REQUEST = \"START_OF_REQUEST\";\r\nexport const END_OF_REQUEST = 'END_OF_REQUEST';\r\n\r\nexport interface SetBoardWidthAction{\r\n    type: typeof SET_BOARD_WIDTH;\r\n    payload: {\r\n        width: number\r\n    }\r\n}\r\n\r\nexport interface SetBoardHeightAction{\r\n    type: typeof SET_BOARD_HEIGHT;\r\n    payload: {\r\n        height: number\r\n    }\r\n}\r\n\r\nexport interface SetNumberOfBombs{\r\n    type: typeof SET_NUMBER_OF_BOMBS;\r\n    payload: {\r\n        numberOfBombs: number\r\n    }\r\n}\r\n\r\nexport interface StartOfRequest{\r\n    type: typeof START_OF_REQUEST;\r\n}\r\n\r\nexport interface EndOfRequest{\r\n    type: typeof END_OF_REQUEST\r\n}\r\n\r\nexport type BoardInfoTypes = StartOfRequest | EndOfRequest | SetBoardWidthAction | SetBoardHeightAction | SetNumberOfBombs;\r\n","export const SET_LOGIN_START = 'SET_LOGIN_START';\r\nexport const SET_LOGIN_SUCCESS = 'SET_LOGIN_SUCCESS';\r\nexport const SET_LOGIN_ERROR = 'SET_LOGIN_ERROR'\r\n\r\nexport const SET_REGISTER_START = 'SET_REGISTER_START';\r\nexport const SET_REGISTER_SUCCESS = 'SET_REGISTER_SUCCESS';\r\nexport const SET_REGISTER_ERROR = 'SET_REGISTER_ERROR';\r\n\r\n\r\nexport interface SetLoginStartAction{\r\n    type: typeof SET_LOGIN_START\r\n}\r\n\r\nexport interface SetLoginSuccessAction{\r\n    type: typeof SET_LOGIN_SUCCESS,\r\n    payload: {\r\n        token: string\r\n    }\r\n}\r\n\r\nexport interface SetLoginErrorAction{\r\n    type: typeof SET_LOGIN_ERROR,\r\n    payload: {\r\n        error: string\r\n    }\r\n}\r\n\r\nexport interface SetRegisterStartAction{\r\n    type: typeof SET_REGISTER_START\r\n}\r\n\r\nexport interface SetRegisterSuccessAction{\r\n    type: typeof SET_REGISTER_SUCCESS\r\n}\r\n\r\nexport interface SetRegisterErrorAction{\r\n    type: typeof SET_REGISTER_ERROR,\r\n    payload: {\r\n        error: string\r\n    }\r\n}\r\n\r\nexport type UserActions = SetLoginStartAction | SetLoginSuccessAction | SetLoginErrorAction | SetRegisterStartAction | SetRegisterSuccessAction | SetRegisterErrorAction","import { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport interface ICell {\r\n    isMined: boolean;\r\n    isClicked: boolean;\r\n    numberOfMinedAdjacentCells: number;\r\n    indexesOfAdjacentCells: number[];\r\n    id: string;\r\n  }\r\n  \r\n  export const checkIfCellIsOnEdgeOfBoard = (\r\n    indexOfCell: number,\r\n    boardHeight: number,\r\n    boardWidth: number\r\n  ) => {\r\n    \r\n    //Indexes starts from 0 which makes difficult these calculations\r\n    return {\r\n      isCellFromFirstRow: indexOfCell + 1 <= boardWidth,\r\n      isCellFromLastRow: indexOfCell + 1 > boardWidth * boardHeight - boardWidth,\r\n      isCellFromFirstColumn: (indexOfCell + 1) % boardWidth === 1,\r\n      isCellFromLastColumn: (indexOfCell + 1) % boardWidth === 0,\r\n    };\r\n  };\r\n  \r\n  export const generateCellsData = (numberOfCells: number) => {\r\n    return Array.from({ length: numberOfCells }).map((_, index) => ({\r\n      isMined: false,\r\n      isClicked: false,\r\n      numberOfMinedAdjacentCells: 0,\r\n      indexesOfAdjacentCells: [],\r\n      id: uuidv4(),\r\n    }));\r\n  };\r\n  \r\n  export const mineRandomCells = (numberOfBombs:number, cells: ICell[]) => {\r\n    const indexesOfMinedCells: number[] = [];\r\n    while (indexesOfMinedCells.length < numberOfBombs) {\r\n      const randomNumber = Math.floor(Math.random() * cells.length);\r\n      if (!indexesOfMinedCells.includes(randomNumber))\r\n        indexesOfMinedCells.push(randomNumber);\r\n    }\r\n  \r\n    indexesOfMinedCells.forEach((indexOfMinedCell: number) => {\r\n      cells[indexOfMinedCell].isMined = true;\r\n    });\r\n    return { cells, indexesOfMinedCells };\r\n  };\r\n  \r\n  export const findIndexesOfAdjacentCells = (\r\n    indexesOfCells: number[],\r\n    boardHeight: number,\r\n    boardWidth: number,\r\n    cb: Function\r\n  ): void => {\r\n    indexesOfCells.forEach((indexOfCell: number) => {\r\n      const {\r\n        isCellFromFirstRow,\r\n        isCellFromFirstColumn,\r\n        isCellFromLastColumn,\r\n        isCellFromLastRow,\r\n      } = checkIfCellIsOnEdgeOfBoard(indexOfCell, boardHeight, boardWidth);\r\n\r\n      if (isCellFromFirstRow && isCellFromFirstColumn) {\r\n        cb(indexOfCell, [\r\n          indexOfCell + 1,\r\n          indexOfCell + boardWidth,\r\n          indexOfCell + boardWidth + 1,\r\n        ]);\r\n      } else if (isCellFromFirstRow && isCellFromLastColumn) {\r\n        cb(indexOfCell, [\r\n          indexOfCell - 1,\r\n          indexOfCell + boardWidth,\r\n          indexOfCell + boardWidth - 1,\r\n        ]);\r\n      } else if (isCellFromLastRow && isCellFromFirstColumn) {\r\n        cb(indexOfCell, [\r\n          indexOfCell + 1,\r\n          indexOfCell - boardWidth,\r\n          indexOfCell - boardWidth + 1,\r\n        ]);\r\n      } else if (isCellFromLastRow && isCellFromLastColumn) {\r\n        cb(indexOfCell, [\r\n          indexOfCell - 1,\r\n          indexOfCell - boardWidth,\r\n          indexOfCell - boardWidth - 1,\r\n        ]);\r\n      } else if (isCellFromFirstRow) {\r\n        cb(indexOfCell, [\r\n          indexOfCell - 1,\r\n          indexOfCell + 1,\r\n          indexOfCell + boardWidth,\r\n          indexOfCell + boardWidth + 1,\r\n          indexOfCell + boardWidth - 1,\r\n        ]);\r\n      } else if (isCellFromLastRow) {\r\n        cb(indexOfCell, [\r\n          indexOfCell - 1,\r\n          indexOfCell + 1,\r\n          indexOfCell - boardWidth,\r\n          indexOfCell - boardWidth - 1,\r\n          indexOfCell - boardWidth + 1,\r\n        ]);\r\n      } else if (isCellFromFirstColumn) {\r\n        cb(indexOfCell, [\r\n          indexOfCell + 1,\r\n          indexOfCell - boardWidth,\r\n          indexOfCell - boardWidth + 1,\r\n          indexOfCell + boardWidth,\r\n          indexOfCell + boardWidth + 1,\r\n        ]);\r\n      } else if (isCellFromLastColumn) {\r\n        cb(indexOfCell, [\r\n          indexOfCell - 1,\r\n          indexOfCell - boardWidth,\r\n          indexOfCell - boardWidth - 1,\r\n          indexOfCell + boardWidth,\r\n          indexOfCell + boardWidth - 1,\r\n        ]);\r\n      } else {\r\n        cb(indexOfCell, [\r\n          indexOfCell - 1,\r\n          indexOfCell + 1,\r\n          indexOfCell - boardWidth,\r\n          indexOfCell - boardWidth - 1,\r\n          indexOfCell - boardWidth + 1,\r\n          indexOfCell + boardWidth,\r\n          indexOfCell + boardWidth - 1,\r\n          indexOfCell + boardWidth + 1,\r\n        ]);\r\n      }\r\n    });\r\n  };\r\n  \r\n  export const generateCells = (numberOfBombs:number, boardHeight: number, boardWidth: number) => {\r\n    const numberOfCells = boardHeight * boardWidth;\r\n    const basicCells = generateCellsData(numberOfCells);\r\n  \r\n    const { cells, indexesOfMinedCells } = mineRandomCells(numberOfBombs, basicCells);\r\n  \r\n    const notifyAdjacentCellsAboutBomb = (\r\n      indexOfCell: number,\r\n      indexesOfAdjacentCells: number[]\r\n    ) => {\r\n      indexesOfAdjacentCells.forEach((index) => {\r\n        cells[index].numberOfMinedAdjacentCells++;\r\n      });\r\n    };\r\n  \r\n    const addInfoAboutAdjacentCells = (\r\n      indexOfCell: number,\r\n      indexesOfAdjacentCells: number[]\r\n    ) => {\r\n      cells[indexOfCell].indexesOfAdjacentCells = indexesOfAdjacentCells;\r\n    };\r\n  \r\n    findIndexesOfAdjacentCells(\r\n      indexesOfMinedCells,\r\n      boardHeight,\r\n      boardWidth,\r\n      notifyAdjacentCellsAboutBomb\r\n    );\r\n  \r\n    findIndexesOfAdjacentCells(\r\n      cells.map((_, i) => i),\r\n      boardHeight,\r\n      boardWidth,\r\n      addInfoAboutAdjacentCells\r\n    );\r\n  \r\n    return cells;\r\n  };","import React, { useState, useEffect } from \"react\";\r\nimport \"./index.scss\";\r\nimport Cell from \"../Cell\";\r\nimport { useTypedSelector } from \"../../../redux/store\";\r\nimport { generateCells, ICell } from \"./functions\";\r\n\r\ninterface Props {\r\n  isGameReseted: boolean;\r\n  setIsGameReseted: Function;\r\n}\r\n\r\nfunction Board({ isGameReseted, setIsGameReseted }: Props) {\r\n  const boardWidth = useTypedSelector((state) => state.board.width);\r\n  const boardHeight = useTypedSelector((state) => state.board.height);\r\n  const numberOfBombs = useTypedSelector((state) => state.board.numberOfBombs);\r\n\r\n  const [cells, setCells] = useState(() =>\r\n    generateCells(numberOfBombs, boardHeight, boardWidth)\r\n  );\r\n  const [isGameOver, setGameOver] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isGameReseted) {\r\n      setCells(generateCells(numberOfBombs, boardHeight, boardWidth));\r\n      setIsGameReseted(false);\r\n    }\r\n  }, [isGameReseted]);\r\n\r\n  useEffect(() => {\r\n    setCells(generateCells(numberOfBombs, boardHeight, boardWidth));\r\n  }, [numberOfBombs, boardWidth, boardHeight]);\r\n\r\n  const boardSideLength = {\r\n    width: `${boardWidth * 40 + 2}px`,\r\n    height: `${boardHeight * 40 + 2}px`,\r\n  };\r\n\r\n  const markAdjacentCellsAsClicked = (\r\n    cells: ICell[],\r\n    indexesOfAdjacentCells: number[]\r\n  ) => {\r\n    indexesOfAdjacentCells.forEach((indexOfCell) => {\r\n      const adjacentCell = cells[indexOfCell];\r\n      if (adjacentCell.isClicked) return;\r\n      adjacentCell.isClicked = true;\r\n\r\n      if (adjacentCell.numberOfMinedAdjacentCells !== 0) return;\r\n\r\n      markAdjacentCellsAsClicked(cells, adjacentCell.indexesOfAdjacentCells);\r\n    });\r\n  };\r\n\r\n  const handleCellClick = (index: number) => {\r\n    const clickedCell = cells[index];\r\n\r\n    if (clickedCell.isMined) {\r\n      setGameOver(true);\r\n\r\n      setCells((cells) => cells.map((cell) => ({ ...cell, isClicked: true })));\r\n      return;\r\n    }\r\n\r\n    const newCells = cells.map((cell) => ({ ...cell }));\r\n    newCells[index].isClicked = true;\r\n\r\n    if (clickedCell.numberOfMinedAdjacentCells === 0) {\r\n      markAdjacentCellsAsClicked(newCells, clickedCell.indexesOfAdjacentCells);\r\n    }\r\n    setCells(newCells);\r\n  };\r\n\r\n  return (\r\n    <div id=\"container-board\">\r\n      <div id=\"board\" style={boardSideLength}>\r\n        {cells.map(\r\n          ({ isMined, isClicked, numberOfMinedAdjacentCells, id }, index) => (\r\n            <Cell\r\n              key={id}\r\n              index={index}\r\n              isMined={isMined}\r\n              isClicked={isClicked}\r\n              numberOfMinedAdjacentCells={numberOfMinedAdjacentCells}\r\n              handleClick={handleCellClick}\r\n            />\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport \"../../global_styles/index.scss\";\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n  isOpened: boolean;\r\n}\r\n\r\nconst Modal = ({ children, isOpened }: Props) => {\r\n  useEffect(() => {\r\n    const root = document.getElementById(\"root\");\r\n    (() => {\r\n      if (!isOpened || !root) return null;\r\n      root.style.filter = \"blur(3px)\";\r\n    })();\r\n\r\n    return () => {\r\n      (() => {\r\n        if (!root) return null;\r\n        root.style.filter = \"none\";\r\n      })();\r\n    };\r\n  }, [isOpened]);\r\n\r\n  if (!isOpened) return null;\r\n\r\n  const modalRoot = document.getElementById(\"modal\");\r\n  if (!modalRoot) return null;\r\n\r\n  return ReactDom.createPortal(\r\n    <div className=\"container-modal flex-center\">{children}</div>,\r\n    modalRoot\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import {\r\n  SET_BOARD_WIDTH,\r\n  SET_BOARD_HEIGHT,\r\n  SetBoardWidthAction,\r\n  SetBoardHeightAction,\r\n  SetNumberOfBombs,\r\n  SET_NUMBER_OF_BOMBS,\r\n  START_OF_REQUEST,\r\n  END_OF_REQUEST,\r\n  StartOfRequest,\r\n  EndOfRequest,\r\n} from \"./types\";\r\nimport { AppDispatch, RootState } from \"../store\";\r\n\r\nexport const setBoardWidth = (width: number): SetBoardWidthAction => ({\r\n  type: SET_BOARD_WIDTH,\r\n  payload: {\r\n    width,\r\n  },\r\n});\r\n\r\nexport const setBoardHeight = (height: number): SetBoardHeightAction => ({\r\n  type: SET_BOARD_HEIGHT,\r\n  payload: {\r\n    height,\r\n  },\r\n});\r\n\r\nexport const setNumberOfBombs = (numberOfBombs: number): SetNumberOfBombs => ({\r\n  type: SET_NUMBER_OF_BOMBS,\r\n  payload: {\r\n    numberOfBombs,\r\n  },\r\n});\r\n\r\nexport const startOfRequest = (): StartOfRequest => ({\r\n  type: START_OF_REQUEST,\r\n});\r\n\r\nexport const endOfRequest = (): EndOfRequest => ({\r\n  type: END_OF_REQUEST,\r\n});\r\n\r\nexport const changeBoardSettings = (\r\n  width: number,\r\n  height: number,\r\n  numberOfBombs: number\r\n) => (dispatch: AppDispatch, getState: () => RootState) => {\r\n  dispatch(startOfRequest());\r\n\r\n  const state = getState();\r\n  fetch(\"/user/settings\", {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      authorization: `Bearer ${state.user.token}`,\r\n    },\r\n    body: JSON.stringify({ width, height, numberOfBombs }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      console.log(\"data: \", data);\r\n      const { width, height, numberOfBombs } = data.boardSettings;\r\n      dispatch(setBoardWidth(width));\r\n      dispatch(setBoardHeight(height));\r\n      dispatch(setNumberOfBombs(numberOfBombs));\r\n    })\r\n    .catch((err) => console.log(\"ERROR: \", err))\r\n    .finally(() => dispatch(endOfRequest()));\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTypedSelector } from \"../../../redux/store\";\r\nimport { changeBoardSettings } from \"../../../redux/BoardSettings/creators\";\r\nimport \"./index.scss\";\r\n\r\ninterface Props {\r\n  closeModal: () => void;\r\n}\r\n\r\nconst GameSettings = ({ closeModal }: Props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const isFetching = useTypedSelector((state) => state.board.isFetching);\r\n  const boardWidthFromRedux = useTypedSelector((state) => state.board.width);\r\n  const boardHeightFromRedux = useTypedSelector((state) => state.board.height);\r\n  const numberOfBombsFromRedux = useTypedSelector(\r\n    (state) => state.board.numberOfBombs\r\n  );\r\n\r\n  const [boardWidthLocal, setBoardWidthLocal] = useState(boardWidthFromRedux);\r\n  const [boardHeightLocal, setBoardHeightLocal] = useState(\r\n    boardHeightFromRedux\r\n  );\r\n  const [numberOfBombsLocal, setNumberOfBombsLocal] = useState(\r\n    numberOfBombsFromRedux\r\n  );\r\n\r\n  const handleSubmit = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    e.preventDefault();\r\n    closeModal();\r\n    dispatch(\r\n      changeBoardSettings(boardWidthLocal, boardHeightLocal, numberOfBombsLocal)\r\n    );\r\n\r\n    console.log(\"CLOSE FUNC: \", closeModal);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-settings pd-20\">\r\n      <h1 className=\"settings-title\">\r\n        Saving this options will reset the game\r\n      </h1>\r\n      <div className=\"flex-space-between\">\r\n        <label htmlFor=\"input-board-width\">\r\n          WIDTH\r\n          <input\r\n            id=\"input-board-width\"\r\n            type=\"number\"\r\n            step={1}\r\n            min={4}\r\n            max={20}\r\n            value={boardWidthLocal}\r\n            onChange={(event) =>\r\n              setBoardWidthLocal(parseInt(event.target.value))\r\n            }\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor=\"input-board-height\">\r\n          HEIGTH\r\n          <input\r\n            id=\"input-board-height\"\r\n            type=\"number\"\r\n            step={1}\r\n            min={4}\r\n            max={20}\r\n            value={boardHeightLocal}\r\n            onChange={(event) =>\r\n              setBoardHeightLocal(parseInt(event.target.value))\r\n            }\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor=\"input-number-of-bombs\">\r\n          NUMBER OF BOMBS\r\n          <input\r\n            id=\"input-number-of-bombs\"\r\n            type=\"number\"\r\n            step={1}\r\n            min={4}\r\n            max={20}\r\n            value={numberOfBombsLocal}\r\n            onChange={(event) =>\r\n              setNumberOfBombsLocal(parseInt(event.target.value))\r\n            }\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"flex-space-between mg-top-30\">\r\n        <button\r\n          className=\"btn btn--neutral\"\r\n          onClick={() => {\r\n            closeModal();\r\n            console.log(\"FIRED\");\r\n          }}\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button className=\"btn\" onClick={handleSubmit}>\r\n          Save\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameSettings;\r\n","import React, { useState, useEffect, FormEvent } from \"react\";\r\nimport \"./index.scss\";\r\n\r\nimport { BiReset } from \"react-icons/bi\";\r\nimport { FiSettings } from \"react-icons/fi\";\r\nimport Modal from \"../../../global_components/Modal\";\r\nimport GameSettings from \"../GameSettings\";\r\n\r\ninterface Props {\r\n  setIsGameReseted: (arg: boolean) => void;\r\n}\r\n\r\nconst Menu = ({ setIsGameReseted }: Props) => {\r\n  const [isModalOpened, setIsModalOpened] = useState(false);\r\n\r\n  const openModal = () => setIsModalOpened(true);\r\n  const closeModal = () => setIsModalOpened(false);\r\n  useEffect(() => {\r\n    console.log(\"IS MODAL OPENED: \", isModalOpened);\r\n  }, [isModalOpened]);\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div\r\n        className=\"container-icon flex-center flex-wrap pd-10\"\r\n        onClick={() => setIsGameReseted(true)}\r\n      >\r\n        <button>\r\n          <BiReset />\r\n        </button>\r\n        <span>Reset</span>\r\n      </div>\r\n\r\n      <div\r\n        className=\"container-icon flex-center flex-wrap pd-10\"\r\n        onClick={openModal}\r\n      >\r\n        <button>\r\n          <FiSettings />\r\n        </button>\r\n        <span>Ustawienia</span>\r\n      </div>\r\n      <Modal isOpened={isModalOpened}>\r\n        <GameSettings closeModal={closeModal} />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { useState } from \"react\";\r\nimport \"./index.scss\";\r\nimport \"../../global_styles/index.scss\";\r\nimport Board from \"./Board/index.tsx\";\r\nimport Menu from \"./Menu/index.tsx\";\r\n\r\nfunction Game() {\r\n  const [isGameReseted, setIsGameReseted] = useState(false);\r\n\r\n  return (\r\n    <div className=\"container-full-screen container-main\">\r\n      <Board\r\n        isGameReseted={isGameReseted}\r\n        setIsGameReseted={setIsGameReseted}\r\n      />\r\n      <Menu setIsGameReseted={setIsGameReseted} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","const createHistory = require(\"history\").createBrowserHistory;\r\n\r\nexport default createHistory();\r\n","import {\r\n  SET_LOGIN_START,\r\n  SET_LOGIN_SUCCESS,\r\n  SET_LOGIN_ERROR,\r\n  SetLoginStartAction,\r\n  SetLoginSuccessAction,\r\n  SetLoginErrorAction,\r\n  SetRegisterSuccessAction,\r\n  SetRegisterStartAction,\r\n  SetRegisterErrorAction,\r\n  SET_REGISTER_START,\r\n  SET_REGISTER_SUCCESS,\r\n  SET_REGISTER_ERROR,\r\n} from \"./types\";\r\nimport { AppDispatch } from \"../store\";\r\nimport {\r\n  setBoardWidth,\r\n  setBoardHeight,\r\n  setNumberOfBombs,\r\n} from \"../BoardSettings/creators\";\r\nimport history from \"../../global_components/History\";\r\n\r\nexport const setLoginStart = (): SetLoginStartAction => ({\r\n  type: SET_LOGIN_START,\r\n});\r\n\r\nexport const setLoginSuccess = (token: string): SetLoginSuccessAction => ({\r\n  type: SET_LOGIN_SUCCESS,\r\n  payload: {\r\n    token,\r\n  },\r\n});\r\n\r\nexport const setLoginError = (error: string): SetLoginErrorAction => ({\r\n  type: SET_LOGIN_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n\r\nexport const login = (email: string, password: string) => (\r\n  dispatch: AppDispatch\r\n) => {\r\n  dispatch(setLoginStart());\r\n\r\n  fetch(\"/user/login\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      if (data.error) return dispatch(setLoginError(data.error));\r\n\r\n      console.log(\"LOGIN DATA: \", data);\r\n      const {\r\n        token,\r\n        boardSettings: { width, height, numberOfBombs },\r\n      } = data;\r\n      localStorage.setItem(\"minesweeper_token\", token);\r\n      dispatch(setLoginSuccess(token));\r\n      dispatch(setBoardWidth(width));\r\n      dispatch(setBoardHeight(height));\r\n      dispatch(setNumberOfBombs(numberOfBombs));\r\n      history.push(\"/game\");\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"ERROR: \", err);\r\n      dispatch(setLoginError(err));\r\n    });\r\n};\r\n\r\nexport const setRegisterStart = (): SetRegisterStartAction => ({\r\n  type: SET_REGISTER_START,\r\n});\r\n\r\nexport const setRegisterSuccess = (): SetRegisterSuccessAction => ({\r\n  type: SET_REGISTER_SUCCESS,\r\n});\r\n\r\nexport const setRegisterError = (error: string): SetRegisterErrorAction => ({\r\n  type: SET_REGISTER_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n\r\nexport const register = (\r\n  email: string,\r\n  password: string,\r\n  passwordConfirmation: string\r\n) => (dispatch: AppDispatch) => {\r\n  dispatch(setRegisterStart());\r\n\r\n  fetch(\"/user/register\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ email, password, passwordConfirmation }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      if (data.error) {\r\n        console.log(\"ERROR: \", data.error);\r\n        dispatch(setRegisterError(data.error));\r\n        return;\r\n      }\r\n      console.log(\"REGISTER DATA: \", data);\r\n      dispatch(setRegisterSuccess());\r\n      history.push(\"/\");\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"ERROR: \", err);\r\n      dispatch(setRegisterError(err));\r\n    });\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"../../global_styles/index.scss\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { login } from \"../../redux/User/creators\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTypedSelector } from \"../../redux/store\";\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n  const loginError = useTypedSelector((state) => state.user.loginError);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"container-full-screen dark-bg flex-center pd-10\">\r\n      <form\r\n        className=\"form pd-10\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          dispatch(login(email, password));\r\n        }}\r\n      >\r\n        <fieldset>\r\n          <legend> Minesweeper</legend>\r\n          <label>\r\n            Email\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            Password\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n          </label>\r\n          {loginError && <span className=\"form-error\">{loginError}</span>}\r\n\r\n          <button className=\"size-auto flex-center\">Login</button>\r\n        </fieldset>\r\n\r\n        <Link to=\"/register\" className=\"form-link\">\r\n          Register here\r\n        </Link>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nconst PrivateRoute = ({ component:Component, ...rest }) => {\r\n    //const token = useSelector(state => state.user.token)\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={(props) =>\r\n          localStorage.getItem(\"minesweeper_token\") ? (\r\n            <Component {...props}/>\r\n          ) : (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/login\",\r\n                state: { from: props.location }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  export default PrivateRoute;","import React, { useState } from \"react\";\r\nimport \"../../global_styles/index.scss\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { register } from \"../../redux/User/creators\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTypedSelector } from \"../../redux/store\";\r\n\r\nconst Register = () => {\r\n  const dispatch = useDispatch();\r\n  const registerError = useTypedSelector((state) => state.user.registerError);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"container-full-screen dark-bg flex-center pd-10\">\r\n      <form\r\n        className=\"form pd-10\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          dispatch(register(email, password, passwordConfirmation));\r\n        }}\r\n      >\r\n        <fieldset>\r\n          <legend> Minesweeper</legend>\r\n          <label>\r\n            Email\r\n            <input value={email} onChange={(e) => setEmail(e.target.value)} />\r\n          </label>\r\n\r\n          <label>\r\n            Password\r\n            <input\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              type=\"password\"\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            Confirm password\r\n            <input\r\n              value={passwordConfirmation}\r\n              onChange={(e) => setPasswordConfirmation(e.target.value)}\r\n              type=\"password\"\r\n            />\r\n          </label>\r\n\r\n          {registerError && <span className=\"form-error\">{registerError}</span>}\r\n\r\n          <button className=\"size-auto flex-center\">Register</button>\r\n        </fieldset>\r\n\r\n        <Link to=\"/\" className=\"form-link\">\r\n          Login here\r\n        </Link>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Game from \"./Screens/Game\";\r\nimport Login from \"./Screens/Login\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store.ts\";\r\nimport { Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport PrivateRoute from \"./global_components/PrivateRoute\";\r\nimport history from \"./global_components/History/index.ts\";\r\nimport Register from \"./Screens/Register\";\r\nimport { IconContext } from \"react-icons\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <IconContext.Provider\r\n        value={{ color: \"blue\", className: \"global-class-name\", size: \"2em\" }}\r\n      >\r\n        <Router history={history}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Login />\r\n            </Route>\r\n            <Route path=\"/register\" exact>\r\n              <Register />\r\n            </Route>\r\n            <PrivateRoute path=\"/game\" exact>\r\n              <Game />\r\n            </PrivateRoute>\r\n          </Switch>\r\n        </Router>\r\n      </IconContext.Provider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}